unit Ladder.TestActivity;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, uConsultaPersonalizada, uConClasses,
  System.Generics.Collections, Ladder.Activity.Classes, Ladder.ServiceLocator,
  Data.DB, System.Classes;

type
  // Test methods for class TOutputBase

  TestTOutputBase = class(TTestCase)
  strict private
    FOutputBase: TOutputBase;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;
  // Test methods for class TExecutorBase

  TestTExecutorBase = class(TTestCase)
  strict private
    FExecutorBase: TExecutorBase;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecutar;
    procedure TestExecutar1;
  end;
  // Test methods for class TExecutorConsultaPersonalizada

  TestTExecutorConsultaPersonalizada = class(TTestCase)
  strict private
    FExecutorConsultaPersonalizada: TExecutorConsultaPersonalizada;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecutar;
  end;
  // Test methods for class TProcessoBase

  TestTProcessoBase = class(TTestCase)
  strict private
    FProcessoBase: TProcessoBase;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecutar;
  end;
  // Test methods for class TAtividade

  TestTAtividade = class(TTestCase)
  strict private
    FAtividade: TAtividade;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecutar;
  end;

implementation

procedure TestTOutputBase.SetUp;
begin
  FOutputBase := TOutputBase.Create;
end;

procedure TestTOutputBase.TearDown;
begin
  FOutputBase.Free;
  FOutputBase := nil;
end;

procedure TestTExecutorBase.SetUp;
begin
  FExecutorBase := TExecutorBase.Create;
end;

procedure TestTExecutorBase.TearDown;
begin
  FExecutorBase.Free;
  FExecutorBase := nil;
end;

procedure TestTExecutorBase.TestExecutar;
var
  ReturnValue: TOutputList;
  pOutputs: TObjectList<TOutputBase>;
  pInputs: TParametros;
begin
  // TODO: Setup method call parameters
  ReturnValue := FExecutorBase.Executar(pInputs, pOutputs);
  // TODO: Validate method results
end;

procedure TestTExecutorBase.TestExecutar1;
var
  ReturnValue: TOutputList;
begin
  ReturnValue := FExecutorBase.Executar;
  // TODO: Validate method results
end;

procedure TestTExecutorConsultaPersonalizada.SetUp;
begin
  FExecutorConsultaPersonalizada := TExecutorConsultaPersonalizada.Create;
end;

procedure TestTExecutorConsultaPersonalizada.TearDown;
begin
  FExecutorConsultaPersonalizada.Free;
  FExecutorConsultaPersonalizada := nil;
end;

procedure TestTExecutorConsultaPersonalizada.TestExecutar;
var
  ReturnValue: TOutputList;
begin
  ReturnValue := FExecutorConsultaPersonalizada.Executar;
  // TODO: Validate method results
end;

procedure TestTProcessoBase.SetUp;
begin
  FProcessoBase := TProcessoBase.Create;
end;

procedure TestTProcessoBase.TearDown;
begin
  FProcessoBase.Free;
  FProcessoBase := nil;
end;

procedure TestTProcessoBase.TestExecutar;
var
  ReturnValue: TOutputList;
begin
  ReturnValue := FProcessoBase.Executar;
  // TODO: Validate method results
end;

procedure TestTAtividade.SetUp;
begin
  FAtividade := TAtividade.Create;
end;

procedure TestTAtividade.TearDown;
begin
  FAtividade.Free;
  FAtividade := nil;
end;

procedure TestTAtividade.TestExecutar;
var
  ReturnValue: TOutputBase;
begin
  ReturnValue := FAtividade.Executar;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTOutputBase.Suite);
  RegisterTest(TestTExecutorBase.Suite);
  RegisterTest(TestTExecutorConsultaPersonalizada.Suite);
  RegisterTest(TestTProcessoBase.Suite);
  RegisterTest(TestTAtividade.Suite);
end.

