unit Test.Classes.Dao;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Ladder.Activity.Classes.Dao, Ladder.Activity.Classes,
  Ladder.ORM.Dao, SynDB, System.Rtti, Ladder.Activity.Manager, SysUtils,
  System.Generics.Defaults;

type
  // Test methods for class TParameterDao
  TestTParameterDao = class(TTestCase)
  strict private
    FParameterDao: TParameterDao<TParameter>;
  public
{    procedure SetUp; override;
    procedure TearDown; override;}
  end;
  // Test methods for class TOutputParameterDao

  // Test methods for class TProcessoDao
  TestTProcessoDao = class(TTestCase)
  strict private
    FProcessoDao: IDaoGeneric<TProcessoBase>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSaveProcesso;
    procedure TestSaveMetaEvolutivo;
  end;
  // Test methods for class TAtividadeDao

  TestTAtividadeDao = class(TTestCase)
  strict private
    FAtividade: TActivity;
    FAtividadeDao: IDaoGeneric<TActivity>;
  private
    procedure ConfigAtividade(pAtividade: TActivity);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSaveAtividade;
  end;

implementation

uses
  Ladder.Executor.ConsultaPersonalizada, Ladder.Executor.Email, Ladder.ServiceLocator, DateUtils,
  Ladder.ORM.ModeloBD, Ladder.Utils;

function NewProcesso(pExecutor: IExecutorBase): TProcessoBase;
begin
  Result:= TProcessoBase.Create(pExecutor, TFrwServiceLocator.Context.DaoUtils);
end;

function NewAtividade: TActivity;
begin
  Result:= TActivity.Create(TFrwServiceLocator.Context.DaoUtils);
end;

function NewProcessoEnviaEmailMeta: TProcessoBase;
begin
  Result:= NewProcesso(TExecutorSendMail.GetExecutor);
  Result.Inputs.Add(TParameter.Create('Titulo', tbValue, '@EnviaEmailMeta.Titulo'));
  Result.Inputs.Add(TParameter.Create('Body', tbValue, '@EnviaEmailMeta.Body'));
  Result.Inputs.Add(TParameter.Create('Destinatarios', tbValue, 'marcelo@rauter.com.br'));
  Result.Inputs.Add(TParameter.Create('Anexos', tbList, '[@Consulta.Export.Grafico, @Consulta.Export.Tabela, @MetaEvolutivo.Export.Grafico]'));
end;

function NewProcessoRelatororiosMeta: TProcessoBase;
var
  FTipoExport, FExport: TParameter;
  FInput: TParameter;
begin
  Result:= NewProcesso(TExecutorConsultaPersonalizada.GetExecutor);
  Result.Name:= 'Consulta';
  FInput:= TParameter.Create('NomeConsulta', tbValue, 'MetaVendedores');
  Result.Inputs.Add(FInput);

  FExport:= TParameter.Create('Export', tbValue);

  FTipoExport:= TParameter.Create('Grafico', tbValue);
  FTipoExport.Parameters.Add(TParameter.Create('Visualizacao', tbValue, 'Realizado e Meta da Venda e Margem'));
  FTipoExport.Parameters.Add(TParameter.Create('NomeArquivo', tbValue, 'MetaVendedores.png'));
  FTipoExport.Parameters.Add(TParameter.Create('TipoVisualizacao', tbValue, 'Grafico'));
  FExport.Parameters.Add(FTipoExport);

  FTipoExport:= TParameter.Create('Tabela', tbValue, '');
  FTipoExport.Parameters.Add(TParameter.Create('Visualizacao', tbValue, 'Realizado e Meta da Venda e Margem'));
  FTipoExport.Parameters.Add(TParameter.Create('NomeArquivo', tbValue, 'MetaVendedores.xls'));
  FTipoExport.Parameters.Add(TParameter.Create('TipoVisualizacao', tbValue, 'Tabela'));
  FExport.Parameters.Add(FTipoExport);

  Result.Inputs.Add(FExport);
end;

function NewProcessoRelatororiosMetaEvolutivo: TProcessoBase;
var
  FTipoExport, FExport: TParameter;
  FInput: TParameter;
begin
  Result:= NewProcesso(TExecutorConsultaPersonalizada.GetExecutor);
  Result.Name:= 'MetaEvolutivo';
  FInput:= TParameter.Create('NomeConsulta', tbValue, 'MetaVendaEvolutivo');
  Result.Inputs.Add(FInput);

  Result.Inputs.Add(TParameter.Create('geDataIni', tbValue, LadderDateToStr(StartOfTheMonth(Now)))); // select first day of the month
  Result.Inputs.Add(TParameter.Create('geDataFim', tbValue, LadderDateToStr(Now)));


  FTipoExport:= TParameter.Create('Grafico', tbValue);
  FTipoExport.Parameters.Add(TParameter.Create('Visualizacao', tbValue, 'Venda e Margem Geral'));
  FTipoExport.Parameters.Add(TParameter.Create('NomeArquivo', tbValue, 'MetaVendedoresEvolutivo.png'));
  FTipoExport.Parameters.Add(TParameter.Create('TipoVisualizacao', tbValue, 'Grafico'));

  FExport:= TParameter.Create('Export', tbValue);
  FExport.Parameters.Add(FTipoExport);

  Result.Inputs.Add(FExport);
end;

procedure TestTAtividadeDao.SetUp;
begin
  FAtividadeDao := TActivityDao<TActivity>.Create;
end;

procedure TestTAtividadeDao.TearDown;
begin
  FAtividadeDao := nil;
end;

procedure TestTAtividadeDao.ConfigAtividade(pAtividade: TActivity);
begin
  pAtividade.Name:= 'EnviaEmailMeta';
  pAtividade.Description:= 'Teste envio de email';
  pAtividade.Inputs.Add(
    TParameter.Create('Titulo', tbValue, 'email de teste'));

  pAtividade.Inputs.Add(
    TParameter.Create('Body', tbValue, 'Este é um email para testar a classe atividade, será enviada uma lista com as vendas com margem baixa de ontem.'));

  pAtividade.Processos.Add(NewProcessoRelatororiosMeta);

  pAtividade.Processos.Add(NewProcessoRelatororiosMetaEvolutivo);

  pAtividade.Processos.Add(NewProcessoEnviaEmailMeta);
end;

procedure TestTAtividadeDao.TestSaveAtividade;
var
  FID: Integer;
  FObject: TObject;
begin
  FAtividade:= NewAtividade;
  ConfigAtividade(FAtividade);

  FAtividadeDao.Save(FAtividade);

  FID:= FAtividade.ID;

  FAtividade.Free;

  FObject:= FAtividadeDao.SelectKey(FID);

  Check(FObject is TActivity);

  FAtividade:= TActivity(FObject);
  Check(FAtividade.Processos.Count = 3);
  FAtividade.Executar;
//  FAtividade.Executar;
end;

{ TestTProcessoDao }

procedure TestTProcessoDao.SetUp;
begin
  FProcessoDao:= TProcessoDao<TProcessoBase>.Create;
end;

procedure TestTProcessoDao.TearDown;
begin
  FProcessoDao := nil;
end;

procedure TestTProcessoDao.TestSaveMetaEvolutivo;
var
  FProcesso: TProcessoBase;
  FID: Integer;
begin
  FProcesso:= NewProcessoRelatororiosMetaEvolutivo;
  FProcessoDao.Save(FProcesso);
  FId:= FProcesso.ID;
  FProcesso.Free;

  FProcesso:= FProcessoDao.SelectKey(FID);
  Check(Assigned(FProcesso));
  Check(FProcesso.GetExecutor <> nil);
  CheckEquals(FProcesso.GetExecutor.ClassType.ClassName, 'TExecutorConsultaPersonalizada');
  FProcesso.Executar;
end;

procedure TestTProcessoDao.TestSaveProcesso;

  function NewProcessoRelatororiosMeta: TProcessoBase;
  var
    FInput, FExportInput: TParameter;
  begin
    Result:= NewProcesso(TExecutorConsultaPersonalizada.GetExecutor);
    Result.Name:= 'Consulta';
    FInput:= TParameter.Create('NomeConsulta', tbValue, 'MetaVendedores');
    Result.Inputs.Add(FInput);

    FExportInput:= TParameter.Create('Export', tbAny, '');
    begin
      FInput:= TParameter.Create('Grafico', tbValue, '');
        FInput.Parameters.Add(TParameter.Create('Visualizacao', tbValue, 'Realizado e Meta da Venda e Margem'));
        FInput.Parameters.Add(TParameter.Create('NomeArquivo', tbValue, 'MetaVendedores.png'));
        FInput.Parameters.Add(TParameter.Create('TipoVisualizacao', tbValue, 'Grafico'));
      FExportInput.Parameters.Add(FInput);

      FInput:= TParameter.Create('Tabela', tbValue, '');
        FInput.Parameters.Add(TParameter.Create('Visualizacao', tbValue, 'Realizado e Meta da Venda e Margem'));
        FInput.Parameters.Add(TParameter.Create('NomeArquivo', tbValue, 'MetaVendedores.xls'));
        FInput.Parameters.Add(TParameter.Create('TipoVisualizacao', tbValue, 'Tabela'));
      FExportInput.Parameters.Add(FInput);
    end;
    Result.Inputs.Add(FExportInput);

    Result.Outputs.Add(TOutputParameter.Create('Grafico', tbValue, ''));
    Result.Outputs.Add(TOutputParameter.Create('Tabela', tbValue, ''));
  end;

var
  FProcesso: TProcessoBase;
  FID: Integer;
begin
  FProcesso:= NewProcessoRelatororiosMeta;
  FProcessoDao.Save(FProcesso);
  FId:= FProcesso.ID;
  FProcesso.Free;

  FProcesso:= FProcessoDao.SelectKey(FID);
  Check(Assigned(FProcesso));
  CheckEquals(2, FProcesso.Inputs.Count);
  CheckEquals(2, FProcesso.Outputs.Count);
  CheckEquals(2, FProcesso.Inputs[1].Parameters.Count);
  CheckEquals(3, FProcesso.Inputs[1].Parameters[0].Parameters.Count);
  CheckEquals('Grafico', FProcesso.Inputs[1].Parameters[0].Name);
  CheckEquals('Visualizacao', FProcesso.Inputs[1].Parameters[0].Parameters[0].Name);
  CheckEquals('Tabela', FProcesso.Inputs[1].Parameters[1].Parameters[2].Expression);

  CheckEquals(3, FProcesso.Inputs[1].Parameters[1].Parameters.Count);

  Check(FProcesso.GetExecutor <> nil);
  CheckEquals(FProcesso.GetExecutor.ClassType.ClassName, 'TExecutorConsultaPersonalizada');
end;

initialization
  // Register any test cases with the test runner
{  RegisterTest(TestTParameterDao.Suite);
  RegisterTest(TestTOutputParameterDao.Suite);    }
  RegisterTest(TestTProcessoDao.Suite);
  RegisterTest(TestTAtividadeDao.Suite);
end.

