unit Test.Classes;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, uConsultaPersonalizada, uConClasses,
  System.Generics.Collections, Ladder.Activity.Classes, Ladder.ServiceLocator,
  Data.DB, System.Classes, Variants;

type
  // Test methods for class TOutputBase

  TMockExecutor = class(TExecutorBase) // For every output the value returned is name of the parameter;
  private
  public
    function Executar: TOutputList; override;
  end;

  THackProcessoBase = class(TProcessoBase);

  TestTProcessoBase = class(TTestCase)
  strict private
    FProcessoBase: THackProcessoBase;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecutar;
    procedure TestFindElementByName;

  end;
  // Test methods for class TAtividade

  THackActivity = class(TActivity);

  TestTActivity = class(TTestCase)
  strict private
    FActivity: THackActivity;
  private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExecutar;
    procedure TestFindElementByName;
  end;

function CreateMockProcess: THackProcessoBase;

implementation

uses
  SynCommons;

procedure AddMockParameters(pProcesso: TProcessoBase);
begin
  pProcesso.Inputs.Add(TParameter.Create('input1', tbValue, 'teste1'));

  pProcesso.Inputs.Add(TParameter.Create('dois', tbValue, 'valordois'));

  pProcesso.Inputs.Add(TParameter.Create('tres', tbList, '[@input1, @dois]'));
end;

function CreateMockProcess: THackProcessoBase;
var
  FInput1, FInput2, FInput3: TParameter;
begin
  Result := THackProcessoBase.Create(TMockExecutor.Create, TFrwServiceLocator.Context.DaoUtils);
end;

procedure TestTProcessoBase.SetUp;
begin
  FProcessoBase:= THackProcessoBase.Create(TMockExecutor.Create, TFrwServiceLocator.Context.DaoUtils);
end;

procedure TestTProcessoBase.TearDown;
begin
  FProcessoBase.Free;
  FProcessoBase := nil;
end;

procedure TestTProcessoBase.TestExecutar;
var
  ReturnValue: TOutputList;
begin
  AddMockParameters(FProcessoBase);
  FProcessoBase.Outputs.Add(TOutputParameter.Create('OutTeste', tbValue, ''));
  ReturnValue := FProcessoBase.Executar;  // Executar must evaluate the parameters

  CheckEquals('teste1', FProcessoBase.Inputs.ParamValue('input1'));
  CheckEquals('teste1', FProcessoBase.Inputs.ParamValue('tres')._(0));
  CheckEquals('valordois', FProcessoBase.Inputs.ParamValue('tres')._(1));

  CheckEquals('OutTeste', FProcessoBase.Outputs.ParamValue('OutTeste')); // MockExecutor makes the parameter value be equals name
end;

procedure TestTProcessoBase.TestFindElementByName;
var
  FInput1, FInput2, FInput3: TParameter;
begin
  AddMockParameters(FProcessoBase);
  FInput1:= (FProcessoBase.FindElementByName('input1') as TParameter);
  FInput2:= (FProcessoBase.FindElementByName('dois') as TParameter);
  FInput3:= (FProcessoBase.FindElementByName('tres') as TParameter);

  CheckEquals('teste1', FInput1.Expression);
  Check(VarIsNull(FInput1.Value));

  FProcessoBase.ValuateInputs(FProcessoBase.OnValuateParameterExpression);

  CheckEquals('teste1', FInput1.Value);
  CheckEquals('teste1', FInput3.Value._(0));
  CheckEquals('valordois', FInput3.Value._(1));
end;

procedure TestTActivity.SetUp;
begin
  FActivity := THackActivity.Create(TFrwServiceLocator.Context.DaoUtils);
end;

procedure TestTActivity.TearDown;
begin
  FActivity.Free;
  FActivity := nil;
end;

procedure TestTActivity.TestExecutar;
var
  ReturnValue: TOutputList;
  FProcesso1, FProcesso2: THackProcessoBase;
begin
  FProcesso1:= CreateMockProcess;
  FProcesso1.Name:= 'Processo1';
  FProcesso1.Inputs.Add(TParameter.Create('p1', tbValue, 'res1'));
  FProcesso1.Inputs.Add(TParameter.Create('p2', tbValue, 'res2'));
  FProcesso1.Outputs.Add(TOutputParameter.Create('Out1', tbValue, ''));

  FProcesso2:= CreateMockProcess;
  FProcesso2.Name:= 'Processo2';
  FProcesso2.Inputs.Add(TParameter.Create('Par3', tbList, '[@Processo1.p1, @Processo1.p2]'));
  FProcesso2.Outputs.Add(TOutputParameter.Create('Out2', tbValue, ''));

  FActivity.Processos.Add(FProcesso1);
  FActivity.Processos.Add(FProcesso2);

  FActivity.Outputs.Add(TOutputParameter.Create('Out1', tbValue, '@Processo1.p1'));
  FActivity.Outputs.Add(TOutputParameter.Create('Out2', tbAny, '@Processo2.Par3'));
  FActivity.Outputs.Add(TOutputParameter.Create('Out3', tbValue, '@Processo2.Out2'));

  ReturnValue := FActivity.Executar;

  CheckEquals('res1', FActivity.Outputs.ParamValue('Out1'));

  CheckEquals(2, FActivity.Outputs.ParamValue('Out2')._Count);
  CheckEquals('res1', FActivity.Outputs.ParamValue('Out2')._(0));
  CheckEquals('res2', FActivity.Outputs.ParamValue('Out2')._(1));

  CheckEquals('Out2', FActivity.Outputs.ParamValue('Out3'));
end;

procedure TestTActivity.TestFindElementByName;
var
  FInput1, FInput2, FInput3: TParameter;
  FProcesso1, FProcesso2: THackProcessoBase;
begin
  FProcesso1:= CreateMockProcess;
  FProcesso1.Name:= 'Processo1';
  FProcesso1.Inputs.Add(TParameter.Create('p1', tbValue, 'res1'));
  FProcesso1.Inputs.Add(TParameter.Create('p2', tbValue, 'res2'));
  //AddMockParameters(FProcesso1);

  FActivity.Processos.Add(FProcesso1);
  FProcesso1.ValuateInputs(FActivity.OnValuateParameterExpression);

  CheckEquals('res1', FProcesso1.Inputs.ParamValue('p1'));
  CheckEquals('res2', FProcesso1.Inputs.ParamValue('p2'));

  FProcesso2:= CreateMockProcess;
  FProcesso2.Name:= 'Processo2';
  FProcesso2.Inputs.Add(TParameter.Create('Par1', tbValue, '@Processo1.p1'));
  FProcesso2.Inputs.Add(TParameter.Create('Par2', tbValue, '@Processo1.p2'));
  FProcesso2.Inputs.Add(TParameter.Create('Par3', tbList, '[@Processo1.p1, @Processo1.p2]'));

  FActivity.Processos.Add(FProcesso2);

  FProcesso2.ValuateInputs(FActivity.OnValuateParameterExpression);

  CheckEquals('res1', FProcesso2.Inputs.ParamValue('Par1'));
  CheckEquals('res2', FProcesso2.Inputs.ParamValue('Par2'));
  CheckEquals(2, FProcesso2.Inputs.ParamValue('Par3')._Count);
  CheckEquals('res1', FProcesso2.Inputs.ParamValue('Par3')._(0));
  CheckEquals('res2', FProcesso2.Inputs.ParamValue('Par3')._(1));
end;

{ TMockExecutor }

function TMockExecutor.Executar: TOutputList;
var
  FOutput: TOutputParameter;
begin
  for FOutput in Outputs do
    if FOutput.ParameterType = tbList then
      FOutput.Value:= _Arr([FOutput.Name])
    else
      FOutput.Value:= FOutput.Name;

end;

initialization
  // Register any test cases with the test runner
//  RegisterTest(TestTOutputBase.Suite);
//  RegisterTest(TestTExecutorBase.Suite);
//  RegisterTest(TestTExecutorConsultaPersonalizada.Suite);
  RegisterTest(TestTProcessoBase.Suite);
  RegisterTest(TestTActivity.Suite);
end.

