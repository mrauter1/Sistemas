unit Test.Dao;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Ladder.ServiceLocator, System.Contnrs, Ladder.ORM.Classes,
  Generics.Collections, Ladder.ORM.ModeloBD, Ladder.ORM.QueryBuilder, RTTI,
  Ladder.Messages, Ladder.ORM.Dao, Data.DB, Ladder.ORM.DaoUtils, Test.MockClasses,
  SysUtils;

type
  // Test methods for class TDaoBase

  TestTDaoBase = class(TTestCase)
  strict private
    FDaoBase: TDaoBase;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure TestSelectKey;
    procedure TestKeyExists;
    procedure TestInsert;
    procedure TestUpdate;
    procedure TestDelete;
    procedure TestDelete1;
    procedure TestUpdateChild;
    procedure TestDeleteChild;
    procedure TestAddChildDao;
    procedure TestSelectWhere;
    procedure TestSelectWhere1;
    procedure TestGetGenericListWhere;
    procedure TestGetGenericListWhere1;
  published
    procedure TestInsertChild;
  end;
  // Test methods for class TDaoGeneric

  TestTDaoGeneric = class(TTestCase)
  strict private
    FDaoGeneric: TDaoGeneric<TTeste>;
    FDaoTestChild: TDaoGeneric<TTestChild>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure TestSelectKey;
    procedure TestKeyExists;
    procedure TestSelectWhere;
    procedure TestSelectWhere1;
  published
    procedure TestInsert;
    procedure TestUpdate;
    procedure TestDelete;
    procedure TestDelete1;
  end;
  // Test methods for class TNullDao

  TestTDaoFactory = class(TTestCase)
  strict private
    FDaoFactory: TDaoFactory;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure TestNewDao;
    procedure TestNewDao1;
    procedure TestNewQueryBuilder;
  published

  end;

implementation

uses
  DateUtils;

procedure TestTDaoBase.SetUp;
var
  FDaoTestChild: TDaoBase;
begin
  FDaoBase:= TDaoBase.Create('Teste', 'ID', TTeste);
  FDaoTestChild := TDaoBase.Create('TestChild', 'ID', TTestChild);
  FDaoBase.AddChildDao('Childs', 'ID', 'IDPAI', FDaoTestChild);
end;

procedure TestTDaoBase.TearDown;
begin
  FDaoBase.Free;
  FDaoBase := nil;
end;

procedure TestTDaoBase.TestSelectKey;
var
  ReturnValue: TObject;
  FChave: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoBase.SelectKey(FChave);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestKeyExists;
var
  ReturnValue: Boolean;
  ID: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoBase.KeyExists(ID);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestInsert;
var
  pObjeto: TObject;
begin
  // TODO: Setup method call parameters
  FDaoBase.Insert(pObjeto);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestUpdate;
var
  ReturnValue: Boolean;
  pObjeto: TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoBase.Update(pObjeto);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestDelete;
var
  pObjeto: TObject;
begin
  // TODO: Setup method call parameters
  FDaoBase.Delete(pObjeto);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestDelete1;
var
  ID: Integer;
begin
  // TODO: Setup method call parameters
  FDaoBase.Delete(ID);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestInsertChild;
var
  ChildDefs: TChildDaoDefs;
  pChild: TTestChild;
  pMaster: TTeste;
  FID: Integer;
begin
  pMaster:= TTeste.Create('TestInsertChild', now, 122.22);
  FDaoBase.Insert(pMaster);
  Check(pMaster.ID <> 0);

  FID:= pMaster.ID;

  pChild:= TTestChild.Create(123);
  pMaster.Childs.Add(pChild);

  FDaoBase.InsertChild(pMaster, pChild);
  Check(pChild.ID <> 0);

  pMaster.Free;
  pMaster:= (FDaoBase.SelectKey(FID) as TTeste);
  Check(pMaster.Childs.Count > 0);
  Check(pMaster.Childs[0].Num = 123);
end;

procedure TestTDaoBase.TestUpdateChild;
var
  ReturnValue: Boolean;
  ChildDefs: TChildDaoDefs;
  pChild: TObject;
  pMaster: TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoBase.UpdateChild(pMaster, pChild, ChildDefs);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestDeleteChild;
var
  ChildDefs: TChildDaoDefs;
  pChild: TObject;
  pMaster: TObject;
begin
  // TODO: Setup method call parameters
  FDaoBase.DeleteChild(pMaster, pChild, ChildDefs);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestAddChildDao;
var
  pDao: IDaoBase;
  pChildFieldName: string;
  pMasterFieldName: string;
  pPropertyName: string;
begin
  // TODO: Setup method call parameters
  FDaoBase.AddChildDao(pPropertyName, pMasterFieldName, pChildFieldName, pDao);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestSelectWhere;
var
  ReturnValue: TObjectList;
  pWhere: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoBase.SelectWhere(pWhere);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestSelectWhere1;
var
  pWhere: string;
  pList: TObjectList;
begin
  // TODO: Setup method call parameters
  FDaoBase.SelectWhere(pList, pWhere);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestGetGenericListWhere;
var
  ReturnValue: TFrwObjectList<TTeste>;
  pWhere: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoBase.SelectWhere<TTeste>(pWhere);
  // TODO: Validate method results
end;

procedure TestTDaoBase.TestGetGenericListWhere1;
var
  pWhere: string;
  pObjectList: TFrwObjectList<TTeste>;
begin
  // TODO: Setup method call parameters
  FDaoBase.SelectWhere<TTeste>(pObjectList, pWhere);
  // TODO: Validate method results
end;

procedure TestTDaoGeneric.SetUp;
begin
  FDaoGeneric := TDaoGeneric<TTeste>.Create('Teste', 'ID');
  FDaoTestChild := TDaoGeneric<TTestChild>.Create('TestChild', 'ID');
  FDaoGeneric.AddChildDao('Childs', 'ID', 'IDPAI', FDaoTestChild);
end;

procedure TestTDaoGeneric.TearDown;
begin
  FDaoGeneric.Free;
  FDaoGeneric := nil;
end;

procedure TestTDaoGeneric.TestSelectKey;
var
  ReturnValue: TTeste;
  FChave: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoGeneric.SelectKey(FChave);
  // TODO: Validate method results
end;

procedure TestTDaoGeneric.TestKeyExists;
var
  ReturnValue: Boolean;
  ID: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoGeneric.KeyExists(ID);
  // TODO: Validate method results
end;

procedure TestTDaoGeneric.TestInsert;
var
  pObjeto: TTeste;
  FID: Integer;
  FData: TDateTime;
  FFloat: Double;
begin
  FData:= now;
  FFloat:= 123.22;
  pObjeto:= TTeste.Create('Teste', FData, FFloat);
  FDaoGeneric.Insert(pObjeto);
  Check(pObjeto.ID <> 0);
  FID:= pObjeto.ID;
  pObjeto.Free;
  pObjeto:= FDaoGeneric.SelectKey(FID);
  CheckEquals('Teste', pObjeto.Texto);
  CheckEquals(SecondOf(FData), SecondOF(pObjeto.Data));
  CheckEquals(MinuteOf(FData), MinuteOf(pObjeto.Data));
  CheckEquals(FFloat, pObjeto.Float);
end;

procedure TestTDaoGeneric.TestUpdate;
var
  FTeste: TTeste;
  FID: Integer;
begin
  FTeste:= TTeste.Create('Teste', now, 122);
  FTeste.Childs.Add(TTestChild.Create(1));
  FTeste.Childs.Add(TTestChild.Create(2));
  FTeste.Childs.Add(TTestChild.Create(3));
  FDaoGeneric.Insert(FTeste);
  FID:= FTeste.ID;
  FTeste.Free;
  FTeste:= FDaoGeneric.SelectKey(FID);
  CheckEquals(3, FTeste.Childs.Count);
  CheckEquals(1, FTeste.Childs[0].Num);
  CheckEquals(2, FTeste.Childs[1].Num);
  CheckEquals(3, FTeste.Childs[2].Num);
  FTeste.Float:= 22;
  FDaoGeneric.Update(FTeste);
  FTeste.Free;
  FTeste:= FDaoGeneric.SelectKey(FID);
  Check(FTeste.Float = 22);
  FTeste.Childs[0].Num:= 4;
  FTeste.Childs[1].Num:= 5;
  FTeste.Childs[2].Num:= 6;
  FDaoGeneric.Update(FTeste);
  FTeste.Free;
  FTeste:= FDaoGeneric.SelectKey(FID);
  CheckEquals(4, FTeste.Childs[0].Num);
  CheckEquals(5, FTeste.Childs[1].Num);
  CheckEquals(6, FTeste.Childs[2].Num);
  FTeste.Childs.Remove(FTeste.Childs[1]);
  FDaoGeneric.Update(FTeste);
  FTeste.Free;
  FTeste:= FDaoGeneric.SelectKey(FID);

  CheckEquals(2, FTeste.Childs.Count);
  CheckEquals(4, FTeste.Childs[0].Num);
  CheckEquals(6, FTeste.Childs[1].Num);
  FTeste.Free;
end;

procedure TestTDaoGeneric.TestDelete;
var
  pObjeto: TTeste;
  FID, FIDChild: Integer;
begin
  pObjeto:= tteste.Create('teste', now, 123);
  pObjeto.Childs.Add(TTestChild.Create(222));
  FDaoGeneric.Insert(pObjeto);
  FID:= pObjeto.ID;
  FIDChild:= pObjeto.Childs[0].ID;

  FDaoGeneric.Delete(pObjeto);

  Check(FDaoGeneric.SelectKey(FID) = nil);
  Check(FDaoTestChild.SelectKey(FIDChild) = nil);
  // TODO: Validate method results
end;

procedure TestTDaoGeneric.TestDelete1;
var
  ID: Integer;
begin
  // TODO: Setup method call parameters
  FDaoGeneric.Delete(ID);
  // TODO: Validate method results
end;

procedure TestTDaoGeneric.TestSelectWhere;
var
  ReturnValue: TFrwObjectList<TTeste>;
  pWhere: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoGeneric.SelectWhere(pWhere);
  // TODO: Validate method results
end;

procedure TestTDaoGeneric.TestSelectWhere1;
var
  pWhere: string;
  pObjectList: TFrwObjectList<TTeste>;
begin
  // TODO: Setup method call parameters
  FDaoGeneric.SelectWhere(pObjectList, pWhere);
  // TODO: Validate method results
end;
procedure TestTDaoFactory.SetUp;
begin
  FDaoFactory := TDaoFactory.Create;
end;

procedure TestTDaoFactory.TearDown;
begin
  FDaoFactory.Free;
  FDaoFactory := nil;
end;

procedure TestTDaoFactory.TestNewDao;
var
  ReturnValue: TDaoBase;
  ModeloBD: TModeloBD;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoFactory.NewDao(ModeloBD);
  // TODO: Validate method results
end;

procedure TestTDaoFactory.TestNewDao1;
var
  ReturnValue: TDaoGeneric<TTeste>;
  ModeloBD: TModeloBD;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoFactory.NewDao<TTeste>(ModeloBD);
  // TODO: Validate method results
end;

procedure TestTDaoFactory.TestNewQueryBuilder;
var
  ReturnValue: TQueryBuilderBase;
  ModeloBD: TModeloBD;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoFactory.NewQueryBuilder(ModeloBD);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDaoBase.Suite);
  RegisterTest(TestTDaoGeneric.Suite);
  RegisterTest(TestTDaoFactory.Suite);
end.

