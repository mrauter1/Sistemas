unit Test.DaoUtils;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, AdoDB, uDmConnection, System.Contnrs, generics.collections,
  System.Classes, System.Rtti, System.SysUtils, SynDB, Data.DB, Ladder.ORM.DaoUtils,
  FireDAC.Comp.Client;

type
  // Test methods for class TDaoUtils

  TestTDaoUtils = class(TTestCase)
  strict private
    FDaoUtils: TDaoUtils;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure TestSelectValue;
    procedure TestSelectDouble;
    procedure TestSelectInt;
    procedure TestSelectAsRecord;
    procedure TestSelectAsArray;
    procedure TestSelectAsObject;
    procedure TestSelectAsObjectList;
    procedure TestSelectAsObjectList1;
    procedure TestExecuteNoResult;
    procedure TestSelectAsDataset;
    procedure TestSelectAsDocVariant;
  published
    procedure TestSelectAsJSon;
  end;

implementation

uses
  Ladder.ServiceLocator, SynCommons;

procedure TestTDaoUtils.SetUp;
begin
  FDaoUtils := TDaoUtils.Create(TFrwServiceLocator.Context.Connection);
end;

procedure TestTDaoUtils.TearDown;
begin
  FDaoUtils.Free;
  FDaoUtils := nil;
end;

procedure TestTDaoUtils.TestExecuteNoResult;
var
  ReturnValue: Integer;
  pSQL: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.ExecuteNoResult(pSQL);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectAsJSon;
const
  cSql = 'SELECT 1 AS ID, ''NÃO'' AS NOME ';
  cResult = '[{"ID":1,"NOME":"NÃO"}]'#$A;
var
  ReturnValue: String;
begin
  ReturnValue := FDaoUtils.SelectAsJSon(cSql);
  CheckEquals(cResult, ReturnValue);
end;

procedure TestTDaoUtils.TestSelectAsDataset;
var
  ReturnValue: TDataSet;
  AOwner: TComponent;
  pSql: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectAsDataset(pSql, AOwner);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectAsDocVariant;
var
  ReturnValue: Variant;
  pSql: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectAsDocVariant(pSql);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectValue;
var
  ReturnValue: Variant;
  pSql: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectValue(pSql);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectDouble;
var
  ReturnValue: Double;
  pValorDef: Double;
  pSQL: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectDouble(pSQL, pValorDef);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectInt;
var
  ReturnValue: Integer;
  pValorDef: Integer;
  pSQL: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectInt(pSQL, pValorDef);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectAsRecord;
var
  ReturnValue: Boolean;
  pSql: string;
  TypeInfo: Pointer;
  Rec: TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectAsRecord(Rec, TypeInfo, pSql);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectAsArray;
var
  ReturnValue: Boolean;
  pSql: string;
  TypeInfo: Pointer;
  pArray: TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectAsArray(pArray, TypeInfo, pSql);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectAsObject;
var
  ReturnValue: Boolean;
  pSql: string;
  ObjectInstance: TObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectAsObject(ObjectInstance, pSql);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectAsObjectList;
var
  ReturnValue: Boolean;
  pSql: string;
  ItemClass: TClass;
  ObjectInstance: TObjectList;
begin
  // TODO: Setup method call parameters
  ReturnValue := FDaoUtils.SelectAsObjectList(ObjectInstance, ItemClass, pSql);
  // TODO: Validate method results
end;

procedure TestTDaoUtils.TestSelectAsObjectList1;
var
  ReturnValue: Boolean;
  pSql: string;
  ItemClass: TClass;
//  ObjectList: TObjectList<System.Object>;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FDaoUtils.SelectAsObjectList(ObjectList, ItemClass, pSql);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDaoUtils.Suite);
end.

