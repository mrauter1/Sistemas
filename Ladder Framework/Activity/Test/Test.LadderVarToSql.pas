unit Test.LadderVarToSql;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SysUtils, Ladder.Activity.LadderVarToSql, SynCommons, Ladder.ORM.DaoUtils,
  Ladder.ServiceLocator;

type
  // Test methods for class TLadderVarToSql

  TestTLadderVarToSql = class(TTestCase)
  strict private
    FLadderVarToSql: TLadderVarToSql;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestTableDocToSql;
    procedure TestValuesDocToSql;
    procedure TestLadderDocVariantToSql;
    procedure TestBatchInsert;
  end;

function GetDaoUtils: TDaoUtils;

implementation

uses
  DateUtils, Dialogs, Classes;

function GetDaoUtils: TDaoUtils;
begin
  Result:= TFrwServiceLocator.Context.DaoUtils;
end;

procedure TestTLadderVarToSql.SetUp;
begin
  FLadderVarToSql := TLadderVarToSql.Create;
end;

procedure TestTLadderVarToSql.TearDown;
begin
  FLadderVarToSql.Free;
  FLadderVarToSql := nil;
end;

procedure TestTLadderVarToSql.TestTableDocToSql;
var
  ReturnValue: string;
  pDocVariant: TDocVariantData;
begin
  // TODO: Setup method call parameters
//  ReturnValue := FLadderVarToSql.TableDocToSql(pDocVariant);
  // TODO: Validate method results
end;

procedure TestTLadderVarToSql.TestValuesDocToSql;
var
  ReturnValue: string;
  pDocVariant: TDocVariantData;
begin
  // TODO: Setup method call parameters
  ReturnValue := FLadderVarToSql.ValuesDocToSql(pDocVariant);
  // TODO: Validate method results
end;

procedure TestTLadderVarToSql.TestBatchInsert;
var
  sStart, sFim: TDateTime;
  DocVariant: TDocVariantData;
begin
  DocVariant:= TDocVariantData(GetDaoUtils.SelectAsDocVariant('select * from MFOR'));
  sStart:= now;
  TLadderVarToSql.InsertDocVariantData(DocVariant, '##MFORTESTE');
  sFim:= now;
  ShowMessage(FOrmat('Time %d ms; ', [MilliSecondsBetween(sStart, sFim)]));
{
  TMySqlServerConnectionProperties(TFrwServiceLocator.Context.Connection).InsertDocVariantData('##MFORTESTE',
        TDocVariantData(GetDaoUtils.SelectAsDocVariant('select top 750 * from MFOR')));}
end;

procedure TestTLadderVarToSql.TestLadderDocVariantToSql;
var
  ReturnValue: string;
  pDocVariant: TDocVariantData;
  sStart, sFim: TDateTime;
  FStr: TStringList;
begin
  // Calls MultipleValuesInsert to insert to a temp table

  pDocVariant:= TDocVariantData(GetDaoUtils.SelectAsDocVariant('select getdate() '));
  ReturnValue := FLadderVarToSql.LadderDocVariantToSql(pDocVariant);
  pDocVariant:= TDocVariantData(GetDaoUtils.SelectAsDocVariant(ReturnValue));

  pDocVariant:= TDocVariantData(GetDaoUtils.SelectAsDocVariant('select TOP 100 * from MFOR order by newid()'));
  sStart:= now;
  ReturnValue := FLadderVarToSql.LadderDocVariantToSql(pDocVariant);
  sFim:= now;

  FStr:= TStringList.Create;
  FStr.Text:= ReturnValue;
  FStr.SaveToFile('F:\Sistemas\Ladder Framework\Activity\Test\sql.sql');
  FStr.Free;

  sStart:= now;
  pDocVariant:= TDocVariantData(GetDaoUtils.SelectAsDocVariant(ReturnValue));
  sFim:= now;
  ShowMessage(FOrmat('Time %d ms; first chave %s', [MilliSecondsBetween(sStart, sFim), pDocvariant._[0].Values[0]]));

  CheckEquals(0, MilliSecondsBetween(sStart, sFim));
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTLadderVarToSql.Suite);
end.

