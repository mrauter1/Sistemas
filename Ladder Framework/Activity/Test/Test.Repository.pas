unit Test.Repository;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Generics.Collections, SysUtils, Ladder.ORM.Dao,
  Ladder.ORM.Repository, Ladder.ORM.Classes,
  Ladder.ORM.ModeloBD, Test.MockClasses;

type
  // Test methods for class TFrwRepository

  TestTFrwRepository = class(TTestCase)
  strict private
    FFrwRepository: TFrwRepository<TTeste>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSave;
    procedure TestGetKeyValue;
    procedure TestInsert;
    procedure TestDelete;
    procedure TestAdd;
    procedure TestUpdate;
    procedure TestLoadEmpty;
    procedure TestLoadWhere;
    procedure TestLoadAll;
    procedure TestLoadByID;
    procedure TestFindByID;
  end;

implementation

procedure TestTFrwRepository.SetUp;
begin
  FFrwRepository := TFrwRepository<TTeste>.Create('TESTE', 'ID');
  FFrwRepository.ChaveIncremental:= True;
  FFrwRepository.LoadEmpty;
end;

procedure TestTFrwRepository.TearDown;
begin
  FFrwRepository.Free;
  FFrwRepository := nil;
end;

procedure TestTFrwRepository.TestLoadByID;
var
  Value: TTeste;
  FID: FrwID;
begin
  with FFrwRepository do
  begin
    LoadEmpty;
    Value:= TTeste.Create('test', now, 22);
    Insert(Value);
    FID:= Value.ID;

    Clear;

    Value:= LoadByID(FID);
    CheckEquals(1, Count);
    CheckEquals('test', Value.Texto);
    Delete(Value);
  end;
end;

procedure TestTFrwRepository.TestFindByID;
var
  Value: TTeste;
begin
  with FFrwRepository do
  begin
    Clear;
    Value:= TTeste.Create('test', now, 22);
    Value.ID:= 27;
    Add(Value);

    Value:= FindByID(27);
    Check(Assigned(Value));

    CheckEquals('test', Value.Texto);
    CheckEquals(22, Value.Float);

    Clear;
    Value:= FindByID(27);
    Check(Assigned(Value) = False);
  end;
end;

procedure TestTFrwRepository.TestLoadAll;
var
  Value: TTeste;
begin
  with FFrwRepository do
  begin
    LoadAll;
    while FFrwRepository.Count > 0 do
      Delete(Items[0]);

    LoadAll;
    CheckEquals(0, Count);

    Insert(TTeste.Create('test1', now, 10.1));
    Insert(TTeste.Create('test2', now, 2));
    Insert(TTeste.Create('test3', now, 11));
    LoadEmpty;
    CheckEquals(0, Count);
    LoadAll;
    CheckEquals(3, Count);

    while FFrwRepository.Count > 0 do
      Delete(Items[0]);

  end;
end;

procedure TestTFrwRepository.TestLoadWhere;
var
  pSqlWhere: string;
  Value: TTeste;
begin
  with FFrwRepository do
  begin
    LoadEmpty;
    Insert(TTeste.Create('test1', now, 10.1));
    Insert(TTeste.Create('test2', now, 2));
    Insert(TTeste.Create('test3', now, 11));

    LoadWhere('FLOAT >= 10');
    Check(Count>=2);
    for Value in FFrwRepository do
      Check(Value.Float >= 10);

    LoadWhere('FLOAT < 10');
    Check(Count>=1);
    for Value in FFrwRepository do
      Check(Value.Float < 10);

    LoadAll;
    while count > 0 do
      Delete(Items[0]);
  end;
end;

procedure TestTFrwRepository.TestLoadEmpty;
var
 Value: TTeste;
begin
  with FFrwRepository do
  begin
    Value:= TTeste.Create('bla', now, 25677.2234);
    Insert(Value);

    LoadEmpty;
    Check(Count=0);
    Delete(Value);
  end;

end;

procedure TestTFrwRepository.TestAdd;
var
  ReturnValue: Integer;
  Value: TTeste;
begin
  FFrwRepository.Clear;

  Value:= TTeste.Create('tst123', now-1, 0.22);
  ReturnValue := FFrwRepository.Add(Value);
  Check(ReturnValue=0);
  Check(FFrwRepository.Contains(Value));

  try
    ReturnValue:= FFrwRepository.Add(Value);
    Fail('Error expected');
  except
  end;

  ReturnValue:= FFrwRepository.Add(TTeste.Create('teste22', now-1, 0.22));
  Check(ReturnValue=1);

  Check(FFrwRepository.Contains(Value));
  Check(Value.ID=0);

  FFrwRepository.Clear;
end;

procedure TestTFrwRepository.TestGetKeyValue;
var
  Value: TTeste;
begin
  Value:= TTeste.Create('teste', now, 1.14);
  Value.ID:= 30;
  CheckEquals(30, FFrwRepository.GetKeyValue(Value));
end;

procedure TestTFrwRepository.TestSave;
var
  FID: Integer;
  Value: TTeste;
begin
  Value:= TTeste.Create('Teste1', Now, 10.23);
  FFrwRepository.Save(Value);
  Check(Value.ID > 0);
  Value.Texto:= 'TesteAlterado';

  FID:= Value.ID;

  Value:= FFrwRepository.LoadByID(FID);
  CheckEquals('Teste1', Value.Texto);

  Value.Texto:= 'TesteAlterado';
  FFrwRepository.Save(Value);

  // Remove does not need to be called. Value2 will be removed on LoadByID, where Clear is called.
  // FFrwRepository.Remove(Value2); // Calling TFrwRepository.Remove here frees the object. LoadByID calls clear and tries to free the objects it contains.

  Value:= FFrwRepository.LoadByID(FID);
  CheckEquals('TesteAlterado', Value.Texto);

  FFrwRepository.Remove(Value); // Remove only removes from the list and Free the object, but do not delete from the database
  Value:= FFrwRepository.LoadByID(FID);
  Check(Assigned(Value));

  FFrwRepository.Delete(Value); // Delete removes the object and delete from the database
  Value:= FFrwRepository.LoadByID(FID);
  Check(Assigned(Value) = False);
end;

procedure TestTFrwRepository.TestInsert;
var
  Value: TTeste;
  FID: Integer;
begin
  Value:= TTeste.Create('Teste1', Now, 10.23);
  FFrwRepository.Insert(Value);
  FID:= Value.ID;
  Check(Value.ID > 0);

  Value:= FFrwRepository.LoadByID(FID);
  Check(Assigned(Value));
  FFrwRepository.Delete(Value);
end;

procedure TestTFrwRepository.TestUpdate;
var
  Value: TTeste;
  FID: Integer;
begin
  with FFrwRepository do
  begin
    Value:= TTeste.Create('teste', now, 22);
    Insert(Value);
    FID:= Value.ID;
    Value.Float:= 10;

    Update(Value);
    Value:= LoadByID(FID);

    CheckEquals(10, Value.Float);
    Delete(Value);
  end;

end;

procedure TestTFrwRepository.TestDelete;
var
  Value: TTeste;
  FID: Integer;
begin
  Value:= TTeste.Create('Teste1', Now, 10.23);
  with FFrwRepository do
  begin
    Insert(Value);
    FID:= Value.ID;
    Clear;
    Value:= LoadByID(FID);
    Delete(Value);

    Check(LoadByID(FID) = nil);
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFrwRepository.Suite);
end.

