unit Test.Scheduler;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Classes, System.Generics.Collections, maxCron,
  Ladder.Activity.Scheduler, Ladder.Activity.Classes;

type
  TMockExecutor = class(TExecutorBase) // For every output the value returned is name of the parameter;
  private
  public
    function Executar: TOutputList; override;
  end;

  // Test methods for class TScheduledActivity

  TestTScheduledActivity = class(TTestCase)
  strict private
    FScheduledActivity: TScheduledActivity;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestNextExecutionTime;
  end;
  // Test methods for class TScheduler

  TestTScheduler = class(TTestCase)
  strict private
    FScheduler: TScheduler;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestScheduler;
  end;

function NewScheduledActivity(ACronExpression: String): TScheduledActivity;

function TimedProcess: TProcessoBase;

implementation

uses
  SysUtils, Ladder.Utils, DateUtils, Ladder.ExpressionEvaluator, Ladder.ServiceLocator, Forms;

function NewScheduledActivity(ACronExpression: String): TScheduledActivity;
begin
  Result:= TScheduledActivity.Create(TExpressionEvaluator.Create(TFrwServiceLocator.Context.DaoUtils));
  Result.CronExpression:= ACronExpression;
  Result.Processos.Add(TimedProcess);
end;

function TimedProcess: TProcessoBase;
begin
  Result:= TProcessoBase.Create(TMockExecutor.Create);
  Result.Inputs.Add(TParameter.Create('Time', tbUnknown, ''));
end;

procedure TestTScheduledActivity.SetUp;
begin
  FScheduledActivity := TScheduledActivity.Create(TExpressionEvaluator.Create(TFrwServiceLocator.Context.DaoUtils));
end;

procedure TestTScheduledActivity.TearDown;
begin
  FScheduledActivity.Free;
  FScheduledActivity := nil;
end;

procedure TestTScheduledActivity.TestNextExecutionTime;

  procedure CheckCronExpression(AExpression: String; ANextDate: TDateTime; ALastExecutionTime: TDateTime=0);
  begin
    FScheduledActivity.LastExecutionTime:= ALastExecutionTime;
    FScheduledActivity.CronExpression:= AExpression;
    CheckEquals(FScheduledActivity.NextExecutionTime, ANextDate);
  end;
begin
// One minute  before the end of year if the last day of the year is Friday
  CheckCronExpression('59 23 31 12 5 *', LadderVarToDateTime('2021-12-31 23:59:00.000'), LadderVarToDateTime('2020-01-01 10:59:00.000'));
// One minute  before the end of year if the last day of the year is Friday
  CheckCronExpression('59 23 31 12 5 *', LadderVarToDateTime('2027-12-31 23:59:00.000'), LadderVarToDateTime('2021-12-31 23:59:00.000'));
// At midnight, on the first day of each month
  CheckCronExpression('0 0 1 * * *', LadderVarToDateTime('2020-08-01 00:00:00.000'), LadderVarToDateTime('2020-07-01 10:00:00.000'));
// Daily at midnight
  CheckCronExpression('0 0 * * * *', LadderVarToDateTime('2020-07-07 00:00:00.000'), LadderVarToDateTime('2020-07-06 10:05:15.000'));
end;

procedure TestTScheduler.SetUp;
begin
  FScheduler := TScheduler.Create;
end;

procedure TestTScheduler.TestScheduler;
var
  FScheduledTime: TDateTime;
  FExecutedTime: TDateTime;
  FActivity: TScheduledActivity;
begin
  FScheduler.Stop;
  FScheduler.ScheduledActivities.Clear;

  FActivity:= NewScheduledActivity('* * * * * *');
  FScheduler.ScheduledActivities.Add(FActivity); // Each minute
  FScheduler.Start;

  FScheduledTime:= DateOf(Now)+EncodeTime(HourOf(Now), MinuteOf(Now), 0, 0);
  FScheduledTime:= IncMinute(FScheduledTime, 1); // Should execute at the start of the next minute

  while FActivity.LastExecutionTime < FScheduledTime do
    Application.ProcessMessages;

  FExecutedTime:= LadderVarToDateTime(FActivity.Processos[0].Inputs.ParamValue('Time'));
  Check(SecondsBetween(FScheduledTime, FExecutedTime) <= 1);
end;

procedure TestTScheduler.TearDown;
begin
  FScheduler.Free;
  FScheduler := nil;
end;

{ TMockExecutor }

function TMockExecutor.Executar: TOutputList;
begin
  Inputs.Param('Time').Value:= Now;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTScheduledActivity.Suite);
  RegisterTest(TestTScheduler.Suite);
end.

